<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\obj\sdio.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\obj\sdio.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Tue Feb 21 04:20:19 2017
<BR><P>
<H3>Maximum Stack Usage =        304 bytes + Unknown(Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; S50Test &rArr; S50RwTest &rArr; S50MFBlockRead &rArr; S50MFRecvBlockData &rArr; S50SendStandFrame &rArr; Rc522StartTransCv &rArr; Rc522SendCmd &rArr; Rc522WaitFlg &rArr; Rc522WriteReg &rArr; SpiDataWrite &rArr; SpiRwByte &rArr; SpiWaitActEnd &rArr; __2printf
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from driver.o(i.ADC1_2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">ADC3_IRQHandler</a> from driver.o(i.ADC3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from lib.o(i.BusFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from driver.o(i.CAN1_RX1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from driver.o(i.CAN1_SCE_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from driver.o(i.DMA1_Channel1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from driver.o(i.DMA1_Channel2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from driver.o(i.DMA1_Channel3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from driver.o(i.DMA1_Channel4_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from driver.o(i.DMA1_Channel5_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from driver.o(i.DMA1_Channel6_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from driver.o(i.DMA1_Channel7_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">DMA2_Channel1_IRQHandler</a> from driver.o(i.DMA2_Channel1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">DMA2_Channel2_IRQHandler</a> from driver.o(i.DMA2_Channel2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">DMA2_Channel3_IRQHandler</a> from driver.o(i.DMA2_Channel3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">DMA2_Channel4_5_IRQHandler</a> from driver.o(i.DMA2_Channel4_5_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from lib.o(i.DebugMon_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from driver.o(i.EXTI0_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from driver.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from driver.o(i.EXTI1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from driver.o(i.EXTI2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from driver.o(i.EXTI3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from driver.o(i.EXTI4_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from driver.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from driver.o(i.FLASH_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">FSMC_IRQHandler</a> from driver.o(i.FSMC_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from lib.o(i.HardFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from driver.o(i.I2C1_ER_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from driver.o(i.I2C1_EV_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from driver.o(i.I2C2_ER_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from driver.o(i.I2C2_EV_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from lib.o(i.MemManage_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from lib.o(i.NMI_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from driver.o(i.PVD_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from lib.o(i.PendSV_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[49]">RC522SpiRead</a> from driver.o(i.RC522SpiRead) referenced from bsp.o(i.Rc522SpiInit)
 <LI><a href="#[f]">RCC_IRQHandler</a> from driver.o(i.RCC_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from driver.o(i.RTCAlarm_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from driver.o(i.RTC_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from driver.o(i.SDIO_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from driver.o(i.SPI1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from driver.o(i.SPI2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from driver.o(i.SPI3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from lib.o(i.SVC_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from lib.o(i.SysTick_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">SystemInit</a> from lib.o(i.SystemInit) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from driver.o(i.TAMPER_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from driver.o(i.TIM1_BRK_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from driver.o(i.TIM1_CC_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from driver.o(i.TIM1_TRG_COM_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from driver.o(i.TIM1_UP_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from driver.o(i.TIM2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from driver.o(i.TIM3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from driver.o(i.TIM4_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from driver.o(i.TIM5_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">TIM6_IRQHandler</a> from driver.o(i.TIM6_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from driver.o(i.TIM7_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_IRQHandler</a> from driver.o(i.TIM8_BRK_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from driver.o(i.TIM8_CC_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_IRQHandler</a> from driver.o(i.TIM8_TRG_COM_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">TIM8_UP_IRQHandler</a> from driver.o(i.TIM8_UP_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from driver.o(i.UART4_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from driver.o(i.UART5_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from driver.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from driver.o(i.USART2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from driver.o(i.USART3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from driver.o(i.USBWakeUp_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from driver.o(i.USB_HP_CAN1_TX_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from driver.o(i.USB_LP_CAN1_RX0_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from lib.o(i.UsageFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from driver.o(i.WWDG_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[4a]">fputc</a> from driver.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[46]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[48]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[d3]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[4b]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[53]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[d4]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[d5]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[d6]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[d7]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[d8]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522WriteFIFO
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50PackAcData
</UL>

<P><STRONG><a name="[d9]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[da]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50TestGetKeyA
</UL>

<P><STRONG><a name="[db]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[dc]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemMalloc
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50DataInit
</UL>

<P><STRONG><a name="[78]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemInit
</UL>

<P><STRONG><a name="[dd]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[50]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[51]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[de]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[df]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[e0]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, driver.o(i.ADC1_2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADC1_2_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC3_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, driver.o(i.ADC3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADC3_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>Beep</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bsp.o(i.Beep))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Beep &rArr; BeepD &rArr; BeepS &rArr; DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeepS
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeepD
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50SendREQA
</UL>

<P><STRONG><a name="[59]"></a>BeepInit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bsp.o(i.BeepInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = BeepInit &rArr; GpioInit
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspInit
</UL>

<P><STRONG><a name="[5b]"></a>BspInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bsp.o(i.BspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = BspInit &rArr; RFIDInit &rArr; Rc522Init &rArr; Rc522RegInit &rArr; Rc522PowerOn &rArr; Rc522RfSw &rArr; Rc522SendCmd &rArr; Rc522WaitFlg &rArr; Rc522WriteReg &rArr; SpiDataWrite &rArr; SpiRwByte &rArr; SpiWaitActEnd &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFIDInit
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;E2PROM_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeepInit
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lib.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, driver.o(i.CAN1_RX1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CAN1_RX1_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, driver.o(i.CAN1_SCE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CAN1_SCE_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, driver.o(i.DMA1_Channel1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Channel1_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, driver.o(i.DMA1_Channel2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Channel2_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, driver.o(i.DMA1_Channel3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Channel3_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, driver.o(i.DMA1_Channel4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Channel4_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, driver.o(i.DMA1_Channel5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Channel5_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, driver.o(i.DMA1_Channel6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Channel6_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, driver.o(i.DMA1_Channel7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Channel7_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, driver.o(i.DMA2_Channel1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Channel1_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, driver.o(i.DMA2_Channel2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Channel2_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, driver.o(i.DMA2_Channel3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Channel3_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, driver.o(i.DMA2_Channel4_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Channel4_5_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lib.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DelayInit</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, driver.o(i.DelayInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DelayInit &rArr; RTC_SetPrescaler
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKCmd
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit
</UL>

<P><STRONG><a name="[58]"></a>DelayMs</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, driver.o(i.DelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50Test
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50CardDetect
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522WaitRxEnd
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522Rst
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeepS
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeepD
</UL>

<P><STRONG><a name="[70]"></a>DelayUs</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, driver.o(i.DelayUs))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDataWrite
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522SpiRead
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWriteByte
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWaitAck
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cStop
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cStart
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cSendAck
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cReadByte
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cInit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522RfSw
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522WaitFlg
</UL>

<P><STRONG><a name="[66]"></a>DriverInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, driver.o(i.DriverInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DriverInit &rArr; UartInit &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemInit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterruptInit
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayInit
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5c]"></a>E2PROM_Init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp.o(i.E2PROM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = E2PROM_Init &rArr; I2cInit &rArr; GpioInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspInit
</UL>

<P><STRONG><a name="[6b]"></a>E2PROM_Read</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, bsp.o(i.E2PROM_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = E2PROM_Read &rArr; I2cRead &rArr; I2cStart &rArr; I2cWriteByte &rArr; I2cWaitAck &rArr; I2cCfgSdaDir &rArr; GpioInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWriteByte
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cStart
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cRead
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50DataInit
</UL>

<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, driver.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI0_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, driver.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI15_10_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, driver.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI1_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, driver.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI2_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, driver.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI3_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, driver.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI4_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, driver.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI9_5_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, driver.o(i.FLASH_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FLASH_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FSMC_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, driver.o(i.FSMC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FSMC_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c9]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, lib.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[5a]"></a>GpioInit</STRONG> (Thumb, 150 bytes, Stack size 20 bytes, driver.o(i.GpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GpioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiGpioInit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiGpioCsInit
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cInit
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cCfgSdaDir
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeepInit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522GpioInit
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lib.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, driver.o(i.I2C1_ER_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C1_ER_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, driver.o(i.I2C1_EV_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C1_EV_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, driver.o(i.I2C2_ER_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C2_ER_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, driver.o(i.I2C2_EV_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C2_EV_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>I2cCfgSdaDir</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, driver.o(i.I2cCfgSdaDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2cCfgSdaDir &rArr; GpioInit
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWaitAck
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cSendAck
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cReadByte
</UL>

<P><STRONG><a name="[6a]"></a>I2cInit</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, driver.o(i.I2cInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = I2cInit &rArr; GpioInit
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;E2PROM_Init
</UL>

<P><STRONG><a name="[6e]"></a>I2cRead</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, driver.o(i.I2cRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = I2cRead &rArr; I2cStart &rArr; I2cWriteByte &rArr; I2cWaitAck &rArr; I2cCfgSdaDir &rArr; GpioInit
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cStop
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cStart
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;E2PROM_Read
</UL>

<P><STRONG><a name="[71]"></a>I2cReadByte</STRONG> (Thumb, 252 bytes, Stack size 20 bytes, driver.o(i.I2cReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2cReadByte &rArr; I2cSendAck &rArr; I2cCfgSdaDir &rArr; GpioInit
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cSendAck
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cCfgSdaDir
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cRead
</UL>

<P><STRONG><a name="[73]"></a>I2cSendAck</STRONG> (Thumb, 354 bytes, Stack size 12 bytes, driver.o(i.I2cSendAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = I2cSendAck &rArr; I2cCfgSdaDir &rArr; GpioInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cCfgSdaDir
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cReadByte
</UL>

<P><STRONG><a name="[6c]"></a>I2cStart</STRONG> (Thumb, 308 bytes, Stack size 24 bytes, driver.o(i.I2cStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = I2cStart &rArr; I2cWriteByte &rArr; I2cWaitAck &rArr; I2cCfgSdaDir &rArr; GpioInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWriteByte
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cRead
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;E2PROM_Read
</UL>

<P><STRONG><a name="[72]"></a>I2cStop</STRONG> (Thumb, 208 bytes, Stack size 8 bytes, driver.o(i.I2cStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2cStop
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cRead
</UL>

<P><STRONG><a name="[74]"></a>I2cWaitAck</STRONG> (Thumb, 326 bytes, Stack size 16 bytes, driver.o(i.I2cWaitAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2cWaitAck &rArr; I2cCfgSdaDir &rArr; GpioInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cCfgSdaDir
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWriteByte
</UL>

<P><STRONG><a name="[6d]"></a>I2cWriteByte</STRONG> (Thumb, 408 bytes, Stack size 24 bytes, driver.o(i.I2cWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = I2cWriteByte &rArr; I2cWaitAck &rArr; I2cCfgSdaDir &rArr; GpioInit
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWaitAck
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cStart
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;E2PROM_Read
</UL>

<P><STRONG><a name="[75]"></a>InterruptCfg</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, driver.o(i.InterruptCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = InterruptCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterruptInit
</UL>

<P><STRONG><a name="[69]"></a>InterruptInit</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, driver.o(i.InterruptInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = InterruptInit &rArr; InterruptCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterruptCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit
</UL>

<P><STRONG><a name="[a4]"></a>MemFree</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, driver.o(i.MemFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MemFree
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522WriteFIFO
</UL>

<P><STRONG><a name="[68]"></a>MemInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, driver.o(i.MemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit
</UL>

<P><STRONG><a name="[79]"></a>MemMalloc</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, driver.o(i.MemMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MemMalloc &rArr; MemGetFirstZero
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemGetFirstZero
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522WriteFIFO
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lib.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d2]"></a>MiddleInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, middle.o(i.MiddleInit))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lib.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, driver.o(i.PVD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PVD_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib.o(i.PWR_BackupAccessCmd))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayInit
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lib.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>RC522SpiRead</STRONG> (Thumb, 354 bytes, Stack size 48 bytes, driver.o(i.RC522SpiRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = RC522SpiRead &rArr; SpiRwByte &rArr; SpiWaitActEnd &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiRwByte
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(i.Rc522SpiInit)
</UL>
<P><STRONG><a name="[5f]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lib.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayInit
</UL>

<P><STRONG><a name="[c8]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lib.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[c7]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, lib.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, driver.o(i.RCC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RCC_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib.o(i.RCC_RTCCLKCmd))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayInit
</UL>

<P><STRONG><a name="[61]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lib.o(i.RCC_RTCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayInit
</UL>

<P><STRONG><a name="[5d]"></a>RFIDInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp.o(i.RFIDInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = RFIDInit &rArr; Rc522Init &rArr; Rc522RegInit &rArr; Rc522PowerOn &rArr; Rc522RfSw &rArr; Rc522SendCmd &rArr; Rc522WaitFlg &rArr; Rc522WriteReg &rArr; SpiDataWrite &rArr; SpiRwByte &rArr; SpiWaitActEnd &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50DataInit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspInit
</UL>

<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, driver.o(i.RTCAlarm_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTCAlarm_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>RTC_EnterConfigMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lib.o(i.RTC_EnterConfigMode))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
</UL>

<P><STRONG><a name="[80]"></a>RTC_ExitConfigMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lib.o(i.RTC_ExitConfigMode))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
</UL>

<P><STRONG><a name="[65]"></a>RTC_GetCounter</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lib.o(i.RTC_GetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>

<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, driver.o(i.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>RTC_SetPrescaler</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, lib.o(i.RTC_SetPrescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_SetPrescaler
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayInit
</UL>

<P><STRONG><a name="[63]"></a>RTC_WaitForLastTask</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lib.o(i.RTC_WaitForLastTask))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayInit
</UL>

<P><STRONG><a name="[81]"></a>Rc522CalcCrc</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, bsp.o(i.Rc522CalcCrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Rc522CalcCrc &rArr; Rc522SendCmd &rArr; Rc522WaitFlg &rArr; Rc522WriteReg &rArr; SpiDataWrite &rArr; SpiRwByte &rArr; SpiWaitActEnd &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522WriteFIFO
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522WaitFlg
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50SendStandFrame
</UL>

<P><STRONG><a name="[8b]"></a>Rc522GetFifoLevel</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bsp.o(i.Rc522GetFifoLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Rc522GetFifoLevel &rArr; Rc522ReadReg &rArr; SpiDataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522ReadFIFO
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522GetValidCnt
</UL>

<P><STRONG><a name="[8c]"></a>Rc522GetValidCnt</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, bsp.o(i.Rc522GetValidCnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Rc522GetValidCnt &rArr; Rc522GetCollBitPos &rArr; Rc522IsColl &rArr; Rc522ChckErr &rArr; Rc522ReadReg &rArr; SpiDataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522GetFifoLevel
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522GetCollBitPos
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50PackAcData
</UL>

<P><STRONG><a name="[7d]"></a>Rc522Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bsp.o(i.Rc522Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Rc522Init &rArr; Rc522RegInit &rArr; Rc522PowerOn &rArr; Rc522RfSw &rArr; Rc522SendCmd &rArr; Rc522WaitFlg &rArr; Rc522WriteReg &rArr; SpiDataWrite &rArr; SpiRwByte &rArr; SpiWaitActEnd &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522SpiInit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522RegInit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522GpioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFIDInit
</UL>

<P><STRONG><a name="[8a]"></a>Rc522IsColl</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bsp.o(i.Rc522IsColl))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Rc522IsColl &rArr; Rc522ChckErr &rArr; Rc522ReadReg &rArr; SpiDataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522ChckErr
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50SendStandFrame
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50SendShortFrame
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522GetCollBitPos
</UL>

<P><STRONG><a name="[90]"></a>Rc522MFAuthent</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, bsp.o(i.Rc522MFAuthent))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Rc522MFAuthent &rArr; Rc522SendCmd &rArr; Rc522WaitFlg &rArr; Rc522WriteReg &rArr; SpiDataWrite &rArr; SpiRwByte &rArr; SpiWaitActEnd &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522WriteFIFO
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50MFAuthent
</UL>

<P><STRONG><a name="[95]"></a>Rc522ReadFIFO</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, bsp.o(i.Rc522ReadFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Rc522ReadFIFO &rArr; Rc522WriteReg &rArr; SpiDataWrite &rArr; SpiRwByte &rArr; SpiWaitActEnd &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDataRead
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522GetFifoLevel
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50SendStandFrame
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50SendShortFrame
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50PackAcData
</UL>

<P><STRONG><a name="[94]"></a>Rc522RfSw</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, bsp.o(i.Rc522RfSw))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Rc522RfSw &rArr; Rc522SendCmd &rArr; Rc522WaitFlg &rArr; Rc522WriteReg &rArr; SpiDataWrite &rArr; SpiRwByte &rArr; SpiWaitActEnd &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522WriteReg
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522PowerOn
</UL>

<P><STRONG><a name="[9b]"></a>Rc522RxCfg</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, bsp.o(i.Rc522RxCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Rc522RxCfg &rArr; Rc522WriteReg &rArr; SpiDataWrite &rArr; SpiRwByte &rArr; SpiWaitActEnd &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50SendStandFrame
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50SendShortFrame
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50AntiCollLeveln
</UL>

<P><STRONG><a name="[9e]"></a>Rc522StartTransCv</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, bsp.o(i.Rc522StartTransCv))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Rc522StartTransCv &rArr; Rc522SendCmd &rArr; Rc522WaitFlg &rArr; Rc522WriteReg &rArr; SpiDataWrite &rArr; SpiRwByte &rArr; SpiWaitActEnd &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522WriteReg
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522SendCmd
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50SendStandFrame
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50SendShortFrame
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50SendAcData
</UL>

<P><STRONG><a name="[9f]"></a>Rc522StopTransCv</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bsp.o(i.Rc522StopTransCv))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Rc522StopTransCv &rArr; Rc522SendCmd &rArr; Rc522WaitFlg &rArr; Rc522WriteReg &rArr; SpiDataWrite &rArr; SpiRwByte &rArr; SpiWaitActEnd &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522WriteReg
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50SendStandFrame
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50SendShortFrame
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50SendAcData
</UL>

<P><STRONG><a name="[a0]"></a>Rc522TxCfg</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bsp.o(i.Rc522TxCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Rc522TxCfg &rArr; Rc522WriteReg &rArr; SpiDataWrite &rArr; SpiRwByte &rArr; SpiWaitActEnd &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50SendStandFrame
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50SendShortFrame
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50AntiCollLeveln
</UL>

<P><STRONG><a name="[a1]"></a>Rc522WaitRxEnd</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bsp.o(i.Rc522WaitRxEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Rc522WaitRxEnd &rArr; Rc522WaitFlg &rArr; Rc522WriteReg &rArr; SpiDataWrite &rArr; SpiRwByte &rArr; SpiWaitActEnd &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522WaitFlg
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50SendStandFrame
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50SendShortFrame
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50SendAcData
</UL>

<P><STRONG><a name="[82]"></a>Rc522WriteFIFO</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, bsp.o(i.Rc522WriteFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Rc522WriteFIFO &rArr; Rc522WriteReg &rArr; SpiDataWrite &rArr; SpiRwByte &rArr; SpiWaitActEnd &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemMalloc
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemFree
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522MFAuthent
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522CalcCrc
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50SendStandFrame
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50SendShortFrame
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50SendAcData
</UL>

<P><STRONG><a name="[ac]"></a>S50CardDetect</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bsp.o(i.S50CardDetect))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = S50CardDetect &rArr; S50AntiCollLoop &rArr; S50AntiCollLeveln &rArr; S50SendAcData &rArr; Rc522StartTransCv &rArr; Rc522SendCmd &rArr; Rc522WaitFlg &rArr; Rc522WriteReg &rArr; SpiDataWrite &rArr; SpiRwByte &rArr; SpiWaitActEnd &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50SendREQA
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50AntiCollLoop
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50Test
</UL>

<P><STRONG><a name="[7e]"></a>S50DataInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bsp.o(i.S50DataInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = S50DataInit &rArr; E2PROM_Read &rArr; I2cRead &rArr; I2cStart &rArr; I2cWriteByte &rArr; I2cWaitAck &rArr; I2cCfgSdaDir &rArr; GpioInit
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;E2PROM_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFIDInit
</UL>

<P><STRONG><a name="[b3]"></a>S50MFAuthent</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, bsp.o(i.S50MFAuthent))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = S50MFAuthent &rArr; Rc522MFAuthent &rArr; Rc522SendCmd &rArr; Rc522WaitFlg &rArr; Rc522WriteReg &rArr; SpiDataWrite &rArr; SpiRwByte &rArr; SpiWaitActEnd &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50MFGetUid
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522MFAuthent
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50Test
</UL>

<P><STRONG><a name="[b5]"></a>S50MFBlockRead</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, bsp.o(i.S50MFBlockRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = S50MFBlockRead &rArr; S50MFRecvBlockData &rArr; S50SendStandFrame &rArr; Rc522StartTransCv &rArr; Rc522SendCmd &rArr; Rc522WaitFlg &rArr; Rc522WriteReg &rArr; SpiDataWrite &rArr; SpiRwByte &rArr; SpiWaitActEnd &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50MFUnPackReadData
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50MFRecvBlockData
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50RwTest
</UL>

<P><STRONG><a name="[b4]"></a>S50MFGetUid</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, bsp.o(i.S50MFGetUid))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50MFAuthent
</UL>

<P><STRONG><a name="[b9]"></a>S50RwTest</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, bsp.o(i.S50RwTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = S50RwTest &rArr; S50MFBlockRead &rArr; S50MFRecvBlockData &rArr; S50SendStandFrame &rArr; Rc522StartTransCv &rArr; Rc522SendCmd &rArr; Rc522WaitFlg &rArr; Rc522WriteReg &rArr; SpiDataWrite &rArr; SpiRwByte &rArr; SpiWaitActEnd &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50MFBlockRead
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50Test
</UL>

<P><STRONG><a name="[bc]"></a>S50Test</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, bsp.o(i.S50Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = S50Test &rArr; S50RwTest &rArr; S50MFBlockRead &rArr; S50MFRecvBlockData &rArr; S50SendStandFrame &rArr; Rc522StartTransCv &rArr; Rc522SendCmd &rArr; Rc522WaitFlg &rArr; Rc522WriteReg &rArr; SpiDataWrite &rArr; SpiRwByte &rArr; SpiWaitActEnd &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50TestGetKeyA
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50RwTest
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50MFAuthent
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50CardDetect
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bd]"></a>S50TestGetKeyA</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp.o(i.S50TestGetKeyA))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = S50TestGetKeyA
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50Test
</UL>

<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, driver.o(i.SDIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SDIO_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, driver.o(i.SPI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI1_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, driver.o(i.SPI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI2_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, driver.o(i.SPI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI3_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lib.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDataWrite
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522SpiRead
</UL>

<P><STRONG><a name="[7c]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lib.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDataWrite
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522SpiRead
</UL>

<P><STRONG><a name="[c3]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lib.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInit
</UL>

<P><STRONG><a name="[c4]"></a>SPI_SSOutputCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lib.o(i.SPI_SSOutputCmd))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInit
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lib.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>SpiDataRead</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, driver.o(i.SpiDataRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SpiDataRead
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522ReadFIFO
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522ReadReg
</UL>

<P><STRONG><a name="[a3]"></a>SpiDataWrite</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, driver.o(i.SpiDataWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SpiDataWrite &rArr; SpiRwByte &rArr; SpiWaitActEnd &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiRwByte
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522WriteFIFO
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522WriteReg
</UL>

<P><STRONG><a name="[c0]"></a>SpiGpioCsInit</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, driver.o(i.SpiGpioCsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SpiGpioCsInit &rArr; GpioInit
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInit
</UL>

<P><STRONG><a name="[c1]"></a>SpiGpioInit</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, driver.o(i.SpiGpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SpiGpioInit &rArr; GpioInit
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInit
</UL>

<P><STRONG><a name="[9d]"></a>SpiInit</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, driver.o(i.SpiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SpiInit &rArr; SpiGpioInit &rArr; GpioInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiRccInit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiGpioInit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiGpioCsInit
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SSOutputCmd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522SpiInit
</UL>

<P><STRONG><a name="[c2]"></a>SpiRccInit</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, driver.o(i.SpiRccInit))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInit
</UL>

<P><STRONG><a name="[7b]"></a>SpiRwByte</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, driver.o(i.SpiRwByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SpiRwByte &rArr; SpiWaitActEnd &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiWaitActEnd
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDataWrite
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522SpiRead
</UL>

<P><STRONG><a name="[c5]"></a>SpiWaitActEnd</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, driver.o(i.SpiWaitActEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SpiWaitActEnd &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiRwByte
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lib.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, lib.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, driver.o(i.TAMPER_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TAMPER_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, driver.o(i.TIM1_BRK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM1_BRK_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, driver.o(i.TIM1_CC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM1_CC_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, driver.o(i.TIM1_TRG_COM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM1_TRG_COM_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, driver.o(i.TIM1_UP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM1_UP_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, driver.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM2_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, driver.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM3_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, driver.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM4_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, driver.o(i.TIM5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM5_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, driver.o(i.TIM6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM6_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, driver.o(i.TIM7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM7_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, driver.o(i.TIM8_BRK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM8_BRK_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, driver.o(i.TIM8_CC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM8_CC_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, driver.o(i.TIM8_TRG_COM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM8_TRG_COM_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, driver.o(i.TIM8_UP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM8_UP_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, driver.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART4_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, driver.o(i.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART5_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, driver.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART1_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, driver.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART2_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, driver.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART3_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[ca]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lib.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[cd]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lib.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSendByte
</UL>

<P><STRONG><a name="[c6]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 52 bytes, lib.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[cc]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lib.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSendByte
</UL>

<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, driver.o(i.USBWakeUp_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBWakeUp_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, driver.o(i.USB_HP_CAN1_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_HP_CAN1_TX_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, driver.o(i.USB_LP_CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_LP_CAN1_RX0_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>UartInit</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, driver.o(i.UartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = UartInit &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit
</UL>

<P><STRONG><a name="[cb]"></a>UartSendByte</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, driver.o(i.UartSendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UartSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lib.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, driver.o(i.WWDG_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WWDG_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[ce]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[e1]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[54]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HP_CAN1_TX_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBWakeUp_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_UP_IRQHandler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_TRG_COM_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CC_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_BRK_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_IRQHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_TRG_COM_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CC_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_BRK_IRQHandler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAMPER_IRQHandler
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiWaitActEnd
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiRwByte
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDataWrite
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_IRQHandler
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_IRQHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCAlarm_IRQHandler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_IRQHandler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522SpiRead
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVD_IRQHandler
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemMalloc
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWriteByte
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWaitAck
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_EV_IRQHandler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_ER_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_EV_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ER_IRQHandler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_IRQHandler
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel4_5_IRQHandler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel3_IRQHandler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel2_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel1_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel6_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel5_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel3_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_SCE_IRQHandler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX1_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50RwTest
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50MFBlockRead
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522WriteFIFO
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522ReadFIFO
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522CalcCrc
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50SendREQA
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50PackAcData
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50MFUnPackReadData
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50ChckSak
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50AntiCollLeveln
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522WaitFlg
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522SendCmd
</UL>

<P><STRONG><a name="[e2]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[e3]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[e4]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[4a]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, driver.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fputc &rArr; UartSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSendByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[46]"></a>main</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = main &rArr; S50Test &rArr; S50RwTest &rArr; S50MFBlockRead &rArr; S50MFRecvBlockData &rArr; S50SendStandFrame &rArr; Rc522StartTransCv &rArr; Rc522SendCmd &rArr; Rc522WaitFlg &rArr; Rc522WriteReg &rArr; SpiDataWrite &rArr; SpiRwByte &rArr; SpiWaitActEnd &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50Test
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiddleInit
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[be]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lib.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[bf]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, lib.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[76]"></a>MemGetFirstZero</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, driver.o(i.MemGetFirstZero))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MemGetFirstZero
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemGetFirstZeroWord
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemMalloc
</UL>

<P><STRONG><a name="[77]"></a>MemGetFirstZeroWord</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, driver.o(i.MemGetFirstZeroWord))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemGetFirstZero
</UL>

<P><STRONG><a name="[57]"></a>BeepD</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bsp.o(i.BeepD))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BeepD &rArr; BeepS &rArr; DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeepS
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep
</UL>

<P><STRONG><a name="[56]"></a>BeepS</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, bsp.o(i.BeepS))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BeepS &rArr; DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeepD
</UL>

<P><STRONG><a name="[9c]"></a>Rc522ChckCmdAutoEnd</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, bsp.o(i.Rc522ChckCmdAutoEnd))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522SendCmd
</UL>

<P><STRONG><a name="[85]"></a>Rc522ChckErr</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, bsp.o(i.Rc522ChckErr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Rc522ChckErr &rArr; Rc522ReadReg &rArr; SpiDataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522IsColl
</UL>

<P><STRONG><a name="[87]"></a>Rc522ComInit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, bsp.o(i.Rc522ComInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Rc522ComInit &rArr; Rc522WriteReg &rArr; SpiDataWrite &rArr; SpiRwByte &rArr; SpiWaitActEnd &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522RegInit
</UL>

<P><STRONG><a name="[89]"></a>Rc522GetCollBitPos</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, bsp.o(i.Rc522GetCollBitPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Rc522GetCollBitPos &rArr; Rc522IsColl &rArr; Rc522ChckErr &rArr; Rc522ReadReg &rArr; SpiDataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522IsColl
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522GetValidCnt
</UL>

<P><STRONG><a name="[8d]"></a>Rc522GpioInit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bsp.o(i.Rc522GpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Rc522GpioInit &rArr; GpioInit
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522Init
</UL>

<P><STRONG><a name="[91]"></a>Rc522PowerOn</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp.o(i.Rc522PowerOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Rc522PowerOn &rArr; Rc522RfSw &rArr; Rc522SendCmd &rArr; Rc522WaitFlg &rArr; Rc522WriteReg &rArr; SpiDataWrite &rArr; SpiRwByte &rArr; SpiWaitActEnd &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522RfSw
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522SendCmd
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522Rst
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522PwrSw
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522RegInit
</UL>

<P><STRONG><a name="[93]"></a>Rc522PwrSw</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bsp.o(i.Rc522PwrSw))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Rc522PwrSw &rArr; Rc522SendCmd &rArr; Rc522WaitFlg &rArr; Rc522WriteReg &rArr; SpiDataWrite &rArr; SpiRwByte &rArr; SpiWaitActEnd &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522SendCmd
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522PowerOn
</UL>

<P><STRONG><a name="[86]"></a>Rc522ReadReg</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, bsp.o(i.Rc522ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Rc522ReadReg &rArr; SpiDataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDataRead
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522StartTransCv
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522GetFifoLevel
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522WaitFlg
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522PwrSw
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522GetCollBitPos
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522ChckErr
</UL>

<P><STRONG><a name="[8f]"></a>Rc522RegInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp.o(i.Rc522RegInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Rc522RegInit &rArr; Rc522PowerOn &rArr; Rc522RfSw &rArr; Rc522SendCmd &rArr; Rc522WaitFlg &rArr; Rc522WriteReg &rArr; SpiDataWrite &rArr; SpiRwByte &rArr; SpiWaitActEnd &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522TxInit
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522TimerInit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522RxInit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522RfInit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522PowerOn
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522ComInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522Init
</UL>

<P><STRONG><a name="[99]"></a>Rc522RfInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp.o(i.Rc522RfInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Rc522RfInit &rArr; Rc522WriteReg &rArr; SpiDataWrite &rArr; SpiRwByte &rArr; SpiWaitActEnd &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522RegInit
</UL>

<P><STRONG><a name="[92]"></a>Rc522Rst</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bsp.o(i.Rc522Rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Rc522Rst &rArr; DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522PowerOn
</UL>

<P><STRONG><a name="[97]"></a>Rc522RxInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp.o(i.Rc522RxInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Rc522RxInit &rArr; Rc522WriteReg &rArr; SpiDataWrite &rArr; SpiRwByte &rArr; SpiWaitActEnd &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522RegInit
</UL>

<P><STRONG><a name="[83]"></a>Rc522SendCmd</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, bsp.o(i.Rc522SendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Rc522SendCmd &rArr; Rc522WaitFlg &rArr; Rc522WriteReg &rArr; SpiDataWrite &rArr; SpiRwByte &rArr; SpiWaitActEnd &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522WriteReg
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522WaitFlg
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522ChckCmdAutoEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522StopTransCv
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522StartTransCv
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522RfSw
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522MFAuthent
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522CalcCrc
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522PwrSw
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522PowerOn
</UL>

<P><STRONG><a name="[8e]"></a>Rc522SpiInit</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, bsp.o(i.Rc522SpiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Rc522SpiInit &rArr; SpiInit &rArr; SpiGpioInit &rArr; GpioInit
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522Init
</UL>

<P><STRONG><a name="[9a]"></a>Rc522TimerInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp.o(i.Rc522TimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Rc522TimerInit &rArr; Rc522WriteReg &rArr; SpiDataWrite &rArr; SpiRwByte &rArr; SpiWaitActEnd &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522RegInit
</UL>

<P><STRONG><a name="[98]"></a>Rc522TxInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp.o(i.Rc522TxInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Rc522TxInit &rArr; Rc522WriteReg &rArr; SpiDataWrite &rArr; SpiRwByte &rArr; SpiWaitActEnd &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522RegInit
</UL>

<P><STRONG><a name="[84]"></a>Rc522WaitFlg</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, bsp.o(i.Rc522WaitFlg))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Rc522WaitFlg &rArr; Rc522WriteReg &rArr; SpiDataWrite &rArr; SpiRwByte &rArr; SpiWaitActEnd &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522WriteReg
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522WaitRxEnd
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522CalcCrc
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522SendCmd
</UL>

<P><STRONG><a name="[88]"></a>Rc522WriteReg</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, bsp.o(i.Rc522WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Rc522WriteReg &rArr; SpiDataWrite &rArr; SpiRwByte &rArr; SpiWaitActEnd &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDataWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522WriteFIFO
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522TxCfg
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522StopTransCv
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522StartTransCv
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522RxCfg
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522RfSw
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522ReadFIFO
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522WaitFlg
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522TxInit
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522TimerInit
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522SendCmd
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522RxInit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522RfInit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522ComInit
</UL>

<P><STRONG><a name="[a5]"></a>S50AntiCollLeveln</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, bsp.o(i.S50AntiCollLeveln))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = S50AntiCollLeveln &rArr; S50SendAcData &rArr; Rc522StartTransCv &rArr; Rc522SendCmd &rArr; Rc522WaitFlg &rArr; Rc522WriteReg &rArr; SpiDataWrite &rArr; SpiRwByte &rArr; SpiWaitActEnd &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522TxCfg
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522RxCfg
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50SendAcData
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50PackAcData
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50AntiCollStaChck
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50AntiCollLoop
</UL>

<P><STRONG><a name="[a9]"></a>S50AntiCollLoop</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, bsp.o(i.S50AntiCollLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = S50AntiCollLoop &rArr; S50AntiCollLeveln &rArr; S50SendAcData &rArr; Rc522StartTransCv &rArr; Rc522SendCmd &rArr; Rc522WaitFlg &rArr; Rc522WriteReg &rArr; SpiDataWrite &rArr; SpiRwByte &rArr; SpiWaitActEnd &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50SelectCard
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50AntiCollLeveln
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50CardDetect
</UL>

<P><STRONG><a name="[a8]"></a>S50AntiCollStaChck</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, bsp.o(i.S50AntiCollStaChck))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = S50AntiCollStaChck &rArr; S50ChckBcc
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50ChckBcc
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50AntiCollLeveln
</UL>

<P><STRONG><a name="[ab]"></a>S50ChckBcc</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bsp.o(i.S50ChckBcc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = S50ChckBcc
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50AntiCollStaChck
</UL>

<P><STRONG><a name="[ae]"></a>S50ChckSak</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, bsp.o(i.S50ChckSak))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = S50ChckSak &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50SelectCard
</UL>

<P><STRONG><a name="[b1]"></a>S50GetDoubleUid</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bsp.o(i.S50GetDoubleUid))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50GetUid
</UL>

<P><STRONG><a name="[b0]"></a>S50GetSingleUid</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bsp.o(i.S50GetSingleUid))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50GetUid
</UL>

<P><STRONG><a name="[b2]"></a>S50GetTripleUid</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, bsp.o(i.S50GetTripleUid))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50GetUid
</UL>

<P><STRONG><a name="[af]"></a>S50GetUid</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bsp.o(i.S50GetUid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = S50GetUid
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50GetTripleUid
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50GetSingleUid
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50GetDoubleUid
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50SelectCard
</UL>

<P><STRONG><a name="[b6]"></a>S50MFRecvBlockData</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, bsp.o(i.S50MFRecvBlockData))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = S50MFRecvBlockData &rArr; S50SendStandFrame &rArr; Rc522StartTransCv &rArr; Rc522SendCmd &rArr; Rc522WaitFlg &rArr; Rc522WriteReg &rArr; SpiDataWrite &rArr; SpiRwByte &rArr; SpiWaitActEnd &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50SendStandFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50MFBlockRead
</UL>

<P><STRONG><a name="[b7]"></a>S50MFUnPackReadData</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, bsp.o(i.S50MFUnPackReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = S50MFUnPackReadData &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50MFBlockRead
</UL>

<P><STRONG><a name="[a7]"></a>S50PackAcData</STRONG> (Thumb, 464 bytes, Stack size 56 bytes, bsp.o(i.S50PackAcData))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = S50PackAcData &rArr; Rc522ReadFIFO &rArr; Rc522WriteReg &rArr; SpiDataWrite &rArr; SpiRwByte &rArr; SpiWaitActEnd &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522ReadFIFO
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522GetValidCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50AntiCollLeveln
</UL>

<P><STRONG><a name="[ba]"></a>S50PackSelectData</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, bsp.o(i.S50PackSelectData))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = S50PackSelectData
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50SelectCard
</UL>

<P><STRONG><a name="[aa]"></a>S50SelectCard</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, bsp.o(i.S50SelectCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = S50SelectCard &rArr; S50SendStandFrame &rArr; Rc522StartTransCv &rArr; Rc522SendCmd &rArr; Rc522WaitFlg &rArr; Rc522WriteReg &rArr; SpiDataWrite &rArr; SpiRwByte &rArr; SpiWaitActEnd &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50SendStandFrame
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50PackSelectData
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50GetUid
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50ChckSak
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50AntiCollLoop
</UL>

<P><STRONG><a name="[a6]"></a>S50SendAcData</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, bsp.o(i.S50SendAcData))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = S50SendAcData &rArr; Rc522StartTransCv &rArr; Rc522SendCmd &rArr; Rc522WaitFlg &rArr; Rc522WriteReg &rArr; SpiDataWrite &rArr; SpiRwByte &rArr; SpiWaitActEnd &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522WriteFIFO
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522WaitRxEnd
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522StopTransCv
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522StartTransCv
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50AntiCollLeveln
</UL>

<P><STRONG><a name="[ad]"></a>S50SendREQA</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bsp.o(i.S50SendREQA))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = S50SendREQA &rArr; S50SendShortFrame &rArr; Rc522StartTransCv &rArr; Rc522SendCmd &rArr; Rc522WaitFlg &rArr; Rc522WriteReg &rArr; SpiDataWrite &rArr; SpiRwByte &rArr; SpiWaitActEnd &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50SendShortFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50CardDetect
</UL>

<P><STRONG><a name="[bb]"></a>S50SendShortFrame</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, bsp.o(i.S50SendShortFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = S50SendShortFrame &rArr; Rc522StartTransCv &rArr; Rc522SendCmd &rArr; Rc522WaitFlg &rArr; Rc522WriteReg &rArr; SpiDataWrite &rArr; SpiRwByte &rArr; SpiWaitActEnd &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522WriteFIFO
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522WaitRxEnd
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522TxCfg
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522StopTransCv
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522StartTransCv
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522RxCfg
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522ReadFIFO
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522IsColl
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50SendREQA
</UL>

<P><STRONG><a name="[b8]"></a>S50SendStandFrame</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, bsp.o(i.S50SendStandFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = S50SendStandFrame &rArr; Rc522StartTransCv &rArr; Rc522SendCmd &rArr; Rc522WaitFlg &rArr; Rc522WriteReg &rArr; SpiDataWrite &rArr; SpiRwByte &rArr; SpiWaitActEnd &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522WriteFIFO
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522WaitRxEnd
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522TxCfg
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522StopTransCv
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522StartTransCv
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522RxCfg
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522ReadFIFO
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522IsColl
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522CalcCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50SelectCard
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S50MFRecvBlockData
</UL>

<P><STRONG><a name="[cf]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[d1]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[d0]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
